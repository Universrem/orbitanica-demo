// full/js/events/panel_buttons.js
'use strict';

import { openCreateModal } from '../userObjects/modal.js';
import { getDiameterData, loadUniverseLibrary } from '../data/data_diameter.js';
import { loadBaseUnits, convertUnit } from '../utils/unit_converter.js';
import { setObject1Scale, addObject2Circle, getCurrentScale } from '../calc/calculate_diameter.js';
import { setBaselineResult, addResult } from '../ui/infoPanel.js';
import { resetAllUI } from './reset.js';
import { getColorForKey } from '../utils/color.js';
import { setCircleLabelTextById, setCircleLabelKeyById } from '../globe/circles.js';

// ---- –≤–∞–ª—ñ–¥–∞—Ç–æ—Ä: –∑–Ω—ñ–º–∞—Ç–∏ .is-invalid –ø—Ä–∏ –≤–≤–æ–¥—ñ/–≤–∏–±–æ—Ä—ñ ----
if (!window.__orbitInvalidFix) {
  const clearInvalid = (e) => {
    const el = e.target;
    if (
      el &&
      (el.matches('#left-panel select') ||
        el.matches('#left-panel input[type="number"], #left-panel input[type="text"]'))
    ) {
      el.classList.remove('is-invalid');
    }
  };
  document.addEventListener('input', clearInvalid, true);
  document.addEventListener('change', clearInvalid, true);
  window.__orbitInvalidFix = true;
}

// –ø—ñ–¥—Ç—è–≥—É—î–º–æ –¥–∞–Ω—ñ —Ç–∞ –æ–¥–∏–Ω–∏—Ü—ñ –∑–∞–∑–¥–∞–ª–µ–≥—ñ–¥—å
loadUniverseLibrary();
loadBaseUnits();

console.log('[panel_buttons] ready');

document.addEventListener('click', (e) => {
  const btn = e.target.closest('button');
  if (!btn) return;

  // –ø—Ä–∞—Ü—é—î–º–æ –ª–∏—à–µ –≤ –º–µ–∂–∞—Ö –±–ª–æ–∫—É –¥—ñ–∞–º–µ—Ç—Ä—ñ–≤
  const block = btn.closest('#univers_diameter');
  if (!block) return;

  // –ø—ñ—Å–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –Ω–∞ data-action —É panel.js
  const action = btn.dataset?.action || btn.id;
  if (!action) return;

  // 1) "–†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏"
  if (action === 'calculate') {
    // === A) –í–ê–õ–Ü–î–ê–¶–Ü–Ø –û–ë–û–• –°–ï–ö–¢–û–†–Ü–í –£ –¶–Ü–ô –ü–Ü–î–°–ï–ö–¶–Ü–á (–û–±'—î–∫—Ç 1 —ñ –û–±'—î–∫—Ç 2) ===
    const scope = btn.closest('details'); // –ø—ñ–¥—Å–µ–∫—Ü—ñ—è, –¥–µ –Ω–∞—Ç–∏—Å–Ω—É–ª–∏ –∫–Ω–æ–ø–∫—É
    const groups = scope ? scope.querySelectorAll('.sector-block') : [];
    const object1Group = groups[0] || null;
    const object2Group = groups[1] || null;

    const validateGroup = (grp) => {
      if (!grp) return true;

      // —è–∫—â–æ —Å–µ–∫—Ç–æ—Ä —É–∂–µ –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏–π –ø—ñ—Å–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É ‚Äî –ù–ï –≤–∞–ª—ñ–¥–∏–º–æ –π–æ–≥–æ
      if (grp.classList.contains('is-locked')) return true;

      // –≤–∞–ª—ñ–¥–∏–º–æ —Ç—ñ–ª—å–∫–∏ —Ç—ñ –ø–æ–ª—è, —â–æ –Ω–µ disabled
      const req = grp.querySelectorAll('select:not([disabled]), input[type="number"]:not([disabled])');

      let ok = true;
      req.forEach((el) => {
        const empty =
          el.tagName === 'SELECT'
            ? el.selectedIndex <= 0
            : String(el.value ?? '').trim() === '';
        el.classList.toggle('is-invalid', empty);
        if (empty) ok = false;
      });
      return ok;
    };

    const isGroupEmpty = (grp) => {
      if (!grp) return true;
      // —ñ–≥–Ω–æ—Ä—É—î–º–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ –ø–æ–ª—è
      const fields = grp.querySelectorAll(
        'select:not([disabled]), input[type="number"]:not([disabled]), input[type="text"]:not([disabled])'
      );
      for (const el of fields) {
        if (el.tagName === 'SELECT' && el.value) return false;
        if (el.type === 'number' && !isNaN(parseFloat(el.value))) return false;
        if (el.type === 'text' && String(el.value).trim()) return false;
      }
      return true;
    };

    const g1ok = validateGroup(object1Group);
    const g2ok = isGroupEmpty(object2Group) ? true : validateGroup(object2Group);
    if (!g1ok || !g2ok) return; // —î –ø–æ—Ä–æ–∂–Ω—ñ –ø–æ–ª—è ‚Äî –Ω–µ —Ä–∞—Ö—É—î–º–æ

    // === B) –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Ä–µ–∂–∏–º —Ü—ñ—î—ó –∂ –ø—ñ–¥—Å–µ–∫—Ü—ñ—ó
    const subblock = btn.closest(
      '[id^="univers_diameter"], [id^="univers_distance"], [id^="univers_luminosity"], [id^="univers_mass"], [id^="history"], [id^="math"], [id^="money"], [id^="geo"], [id^="other"]'
    );
    if (!subblock) return;

    // --- –î–Ü–ê–ú–ï–¢–† ---
    if (subblock.id.startsWith('univers_diameter')) {
      const data = getDiameterData();
      if (!data) {
        console.warn('‚ùå –ù–µ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ –≤—Å—ñ –ø–æ–ª—è –∞–±–æ —â–µ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ univers.json.');
        return;
      }

      // 1) –ó–∞–¥–∞–ª–∏ –º–∞—Å—à—Ç–∞–± –∑–∞ –æ–±'—î–∫—Ç–æ–º 1
      const color1 = getColorForKey(`diam:${data.object1.name || data.object1.libIndex}`);
      const baselineId = setObject1Scale(
        data.object1.diameterReal,
        data.object1.unit,
        data.object1.diameterScaled,
        color1
      );

      // 2) –û–±'—î–∫—Ç 2 (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ): –º–∞–ª—é—î–º–æ, —Ä–∞—Ö—É—î–º–æ –º–∞—Å—à—Ç–∞–±–æ–≤–∞–Ω–∏–π –¥—ñ–∞–º–µ—Ç—Ä, –¥–æ–¥–∞—î–º–æ –≤ —ñ–Ω—Ñ–æ–ø–∞–Ω–µ–ª—å —ñ —Å—Ç–∞–≤–∏–º–æ –ª–µ–π–±–ª
      if (data.object2) {
        const color2 = getColorForKey(`diam:${data.object2.name || data.object2.libIndex}`);
        const id2 = addObject2Circle(data.object2.diameterReal, data.object2.unit, color2);

        const scale = getCurrentScale();
        let obj2ScaledMeters = null;
        if (scale && isFinite(scale)) {
          const real2m = Number(convertUnit(data.object2.diameterReal, data.object2.unit, 'm', 'diameter'));
          if (isFinite(real2m) && real2m > 0) obj2ScaledMeters = real2m * scale;
        }

        // –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –û–±'—î–∫—Ç–∞ 2 (–∑ –æ–ø–∏—Å–æ–º)
        addResult({
          libIndex: data.object2.libIndex,
          realValue: data.object2.diameterReal,
          realUnit: data.object2.unit,
          scaledMeters: obj2ScaledMeters,
          name: data.object2.name,
          description: data.object2.description,
          color: color2
        });

        // –õ–µ–π–±–ª/–∫–ª—é—á –¥–ª—è –û–±'—î–∫—Ç–∞ 2
        if (id2) {
          setCircleLabelTextById(id2, data.object2.name);
          setCircleLabelKeyById(
            id2,
            Number.isInteger(data.object2.libIndex) && data.object2.libIndex >= 0
              ? { type: 'lib', libIndex: data.object2.libIndex }
              : { type: 'custom', customName: data.object2.name }
          );
        }
      }

      // 3) –Ü–Ω—Ñ–æ–ø–∞–Ω–µ–ª—å ‚Äî baseline (–û1)
      setBaselineResult({
        libIndex: data.object1.libIndex,
        realValue: data.object1.diameterReal,
        realUnit: data.object1.unit,
        scaledMeters: data.object1.diameterScaled,
        name: data.object1.name,
        description: data.object1.description,
        color: color1
      });

      // üîí –°—Ç–∞—Ä—Ç —Å–µ—Å—ñ—ó: –±–ª–æ–∫—É—î–º–æ –∑–º—ñ–Ω—É –º–æ–≤–∏ –¥–æ —Å–∫–∏–¥–∞–Ω–Ω—è (–æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ)
      if (!window.__orbitSessionActive) {
        window.__orbitSessionActive = true;
        window.dispatchEvent(new CustomEvent('orbit:session-start'));
      }

      // 4) –õ–µ–π–±–ª/–∫–ª—é—á –¥–ª—è –û–±'—î–∫—Ç–∞ 1 (—á–µ—Ä–µ–∑ —Ä–µ—î—Å—Ç—Ä —É circles.js)
      if (baselineId) {
        setCircleLabelTextById(baselineId, data.object1.name);
        setCircleLabelKeyById(
          baselineId,
          Number.isInteger(data.object1.libIndex) && data.object1.libIndex >= 0
            ? { type: 'lib', libIndex: data.object1.libIndex }
            : { type: 'custom', customName: data.object1.name }
        );
      }

      // 5) –ü—ñ—Å–ª—è —É—Å–ø—ñ—Ö—É: –±–ª–æ–∫—É—î–º–æ —Å–µ–∫—Ç–æ—Ä 1 —ñ –ø—ñ–¥—Å–≤—ñ—á—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –≤ –¶–Ü–ô –ø—ñ–¥—Å–µ–∫—Ü—ñ—ó
      if (object1Group) {
        object1Group.classList.add('is-locked');
        object1Group.querySelectorAll('select, input, button').forEach((el) => {
          const act = el.dataset?.action || el.id || '';
          if (act === 'calculate' || act === 'reset') return; // –Ω–µ –±–ª–æ–∫—É—î–º–æ —Ü—ñ –∫–Ω–æ–ø–∫–∏
          el.disabled = true;
        });
      }
      if (scope) {
        scope.querySelectorAll('button[data-action="calculate"]').forEach((b) => b.classList.add('is-active')); // –∑–µ–ª–µ–Ω–∞
        scope.querySelectorAll('button[data-action="reset"]').forEach((b) => b.classList.add('is-active')); // —á–µ—Ä–≤–æ–Ω–∞
      }

      console.log('‚úÖ –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –¥—ñ–∞–º–µ—Ç—Ä–∞ –≤–∏–∫–æ–Ω–∞–Ω–æ');
      return;
    }

    // --- –Ü–Ω—à—ñ —Ä–µ–∂–∏–º–∏ (–ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∏) ---
    if (subblock.id.startsWith('univers_distance')) console.log('üìè distance: TODO');
    if (subblock.id.startsWith('univers_luminosity')) console.log('üí° luminosity: TODO');
    if (subblock.id.startsWith('univers_mass')) console.log('‚öñ mass: TODO');
    if (subblock.id.startsWith('history')) console.log('üï∞ history: TODO');
    if (subblock.id.startsWith('math')) console.log('‚ûó math: TODO');
    if (subblock.id.startsWith('money')) console.log('üí∞ money: TODO');
    if (subblock.id.startsWith('geo')) console.log('üó∫ geo: TODO');
    if (subblock.id.startsWith('other')) console.log('üì¶ other: TODO');

    return; // –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≥—ñ–ª–∫—É calculate
  }

  // 2) "–°–∫–∏–Ω—É—Ç–∏"
  if (action === 'reset') {
    resetAllUI();
    console.log('‚úÖ –ü–æ–≤–Ω–∏–π —Å–∫–∏–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ');
    return;
  }
});

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// –î–µ–ª–µ–≥–æ–≤–∞–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–°—Ç–≤–æ—Ä–∏—Ç–∏" —É –±–ª–æ—Ü—ñ –î–Ü–ê–ú–ï–¢–†–ò
document.addEventListener('click', async (e) => {
  const btn = e.target.closest('button');
  if (!(btn instanceof HTMLElement)) return;

  const action = btn.dataset?.action || btn.id;
  if (action !== 'create') return;

  // –ü—Ä–∞—Ü—é—î–º–æ —Ç—ñ–ª—å–∫–∏ –∫–æ–ª–∏ –∫–ª—ñ–∫ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –±–ª–æ–∫—É "–î—ñ–∞–º–µ—Ç—Ä–∏"
  const block = btn.closest('#univers_diameter');
  if (!block) return;

  // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Å–ª–æ—Ç –∑–∞ —Å–µ–∫—Ç–æ—Ä–æ–º
  const group = btn.closest('.sector-block');
  let slot = 'object2';
  if (group?.querySelector('#createFirstObject')) slot = 'object1';
  if (group?.querySelector('#createSecondObject')) slot = 'object2';

  // –ü—ñ–¥—Ç—è–≥—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ –≤–∏–±—Ä–∞–Ω—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
  const presetCategoryEl = document.getElementById(
    slot === 'object1' ? 'diamCategoryObject1' : 'diamCategoryObject2'
  );
  const presetCategory =
    presetCategoryEl && typeof presetCategoryEl.value === 'string' ? presetCategoryEl.value : '';

  // –í—ñ–¥–∫—Ä–∏—Ç–∏ –º–æ–¥–∞–ª–∫—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
  await openCreateModal({ mode: 'diameter', presetCategory, slot });
});
