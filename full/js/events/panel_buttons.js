//full/js/events/panel_buttons.js

'use strict';

import { openCreateModal } from '../userObjects/modal.js';
import { loadUniverseLibrary } from '../data/universe.js';
import { loadBaseUnits, convertUnit } from '../utils/unit_converter.js';
import { resetAllUI } from './reset.js';
import { onDistanceCalculate } from './distance_buttons.js';
import { onDiameterCalculate } from './diameter_buttons.js';



// ---- –≤–∞–ª—ñ–¥–∞—Ç–æ—Ä: –∑–Ω—ñ–º–∞—Ç–∏ .is-invalid –ø—Ä–∏ –≤–≤–æ–¥—ñ/–≤–∏–±–æ—Ä—ñ ----
if (!window.__orbitInvalidFix) {
  const clearInvalid = (e) => {
    const el = e.target;
    if (
      el &&
      (el.matches('#left-panel select') ||
        el.matches('#left-panel input[type="number"], #left-panel input[type="text"]'))
    ) {
      el.classList.remove('is-invalid');
    }
  };
  document.addEventListener('input', clearInvalid, true);
  document.addEventListener('change', clearInvalid, true);
  window.__orbitInvalidFix = true;
}

// –ø—ñ–¥—Ç—è–≥—É—î–º–æ –¥–∞–Ω—ñ —Ç–∞ –æ–¥–∏–Ω–∏—Ü—ñ –∑–∞–∑–¥–∞–ª–µ–≥—ñ–¥—å
loadUniverseLibrary();
loadBaseUnits();

console.log('[panel_buttons] ready');

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// –î–µ–ª–µ–≥–æ–≤–∞–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –æ—Å–Ω–æ–≤–Ω–∏—Ö –∫–Ω–æ–ø–æ–∫ (Calculate / Reset)
if (!window.__panelButtonsBound) {
  window.__panelButtonsBound = true;

  // –∫–æ—Ä–æ—Ç–∫–∞ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –ª–∏—à–µ –Ω–∞ —á–∞—Å —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É, –ø–æ –ø—ñ–¥—Å–µ–∫—Ü—ñ—ó
  const busyScopes = new WeakMap();

  document.addEventListener('click', (e) => {
    const btn = e.target.closest('button');
    if (!btn) return;

    // –ø—Ä–∞—Ü—é—î–º–æ –ª–∏—à–µ –≤ –º–µ–∂–∞—Ö –±–ª–æ–∫—É –¥—ñ–∞–º–µ—Ç—Ä, –≤—ñ–¥—Å—Ç–∞–Ω—å
    const block = btn.closest('#univers_diameter, #univers_distance');

    if (!block) return;

    const action = btn.dataset?.action || btn.id;
    if (!action) return;

    // 1) "–†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏"
    if (action === 'calculate') {
      e.preventDefault();

      const scope = btn.closest('details'); // –ø—ñ–¥—Å–µ–∫—Ü—ñ—è, –¥–µ –Ω–∞—Ç–∏—Å–Ω—É–ª–∏ –∫–Ω–æ–ø–∫—É
      if (!scope) return;

      if (busyScopes.get(scope)) return; // –∑–∞–ø–æ–±—ñ–≥–∞—î–º–æ –ø–æ–¥–≤—ñ–π–Ω–æ–º—É —Å—Ç–∞—Ä—Ç—É
      busyScopes.set(scope, true);

      try {
        // === A) –í–ê–õ–Ü–î–ê–¶–Ü–Ø –û–ë–û–• –°–ï–ö–¢–û–†–Ü–í –£ –¶–Ü–ô –ü–Ü–î–°–ï–ö–¶–Ü–á (–û–±'—î–∫—Ç 1 —ñ –û–±'—î–∫—Ç 2) ===
        const groups = scope ? scope.querySelectorAll('.sector-block') : [];
        const object1Group = groups[0] || null;
        const object2Group = groups[1] || null;

        const validateGroup = (grp) => {
          if (!grp) return true;
          if (grp.classList.contains('is-locked')) return true; // —É–∂–µ –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏–π
          const req = grp.querySelectorAll('select:not([disabled]), input[type="number"]:not([disabled])');
          let ok = true;
          req.forEach((el) => {
            const empty =
              el.tagName === 'SELECT'
                ? el.selectedIndex <= 0
                : String(el.value ?? '').trim() === '';
            el.classList.toggle('is-invalid', empty);
            if (empty) ok = false;
          });
          return ok;
        };

        const isGroupEmpty = (grp) => {
          if (!grp) return true;
          const fields = grp.querySelectorAll(
            'select:not([disabled]), input[type="number"]:not([disabled]), input[type="text"]:not([disabled])'
          );
          for (const el of fields) {
            if (el.tagName === 'SELECT' && el.value) return false;
            if (el.type === 'number' && !isNaN(parseFloat(el.value))) return false;
            if (el.type === 'text' && String(el.value).trim()) return false;
          }
          return true;
        };

        const g1ok = validateGroup(object1Group);
        // ‚ùó –û–±'—î–∫—Ç 2 –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π –¥–ª—è —Å—Ç–∞—Ä—Ç—É
        const g2ok = validateGroup(object2Group);
        if (!g1ok || !g2ok) return; // —î –ø–æ—Ä–æ–∂–Ω—ñ –ø–æ–ª—è ‚Äî –Ω–µ —Ä–∞—Ö—É—î–º–æ

        // === B) –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Ä–µ–∂–∏–º —Ü—ñ—î—ó –∂ –ø—ñ–¥—Å–µ–∫—Ü—ñ—ó
        const subblock = btn.closest(
          '[id^="univers_diameter"], [id^="univers_distance"], [id^="univers_luminosity"], [id^="univers_mass"], [id^="history"], [id^="math"], [id^="money"], [id^="geo"], [id^="other"]'
        );
        if (!subblock) return;

        // --- –î–Ü–ê–ú–ï–¢–† ---
                if (subblock.id.startsWith('univers_diameter')) {
          onDiameterCalculate({ scope, object1Group, object2Group });
          return;
        }

        // --- –í—ñ–¥—Å—Ç–∞–Ω—å ---
        if (subblock.id.startsWith('univers_distance')) {
          onDistanceCalculate({ scope, object1Group, object2Group });
          return;
        }

        if (subblock.id.startsWith('univers_luminosity')) console.log('üí° luminosity: TODO');
        if (subblock.id.startsWith('univers_mass')) console.log('‚öñ mass: TODO');
        if (subblock.id.startsWith('history')) console.log('üï∞ history: TODO');
        if (subblock.id.startsWith('math')) console.log('‚ûó math: TODO');
        if (subblock.id.startsWith('money')) console.log('üí∞ money: TODO');
        if (subblock.id.startsWith('geo')) console.log('üó∫ geo: TODO');
        if (subblock.id.startsWith('other')) console.log('üì¶ other: TODO');
      } finally {
        // –ó–∞–≤–∂–¥–∏ –∑–Ω—è—Ç–∏ –∫–æ—Ä–æ—Ç–∫–µ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è —Ç–∞ –ø—Ä–∏–±—Ä–∞—Ç–∏ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ñ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        const scope = btn.closest('details');
        busyScopes.delete(scope);
        try {
          scope && scope.querySelectorAll('button[data-action="calculate"], button[data-action="reset"]').forEach((b) => b.classList.remove('is-active'));
        } catch {}
      }

      return; // –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≥—ñ–ª–∫—É calculate
    }

    // 2) "–°–∫–∏–Ω—É—Ç–∏"
    if (action === 'reset') {
      resetAllUI();
      console.log('‚úÖ –ü–æ–≤–Ω–∏–π —Å–∫–∏–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ');
      return;
    }
  });
}

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// –î–µ–ª–µ–≥–æ–≤–∞–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–°—Ç–≤–æ—Ä–∏—Ç–∏" —É –±–ª–æ—Ü—ñ –î–Ü–ê–ú–ï–¢–†–ò
if (!window.__panelCreateBound) {
  window.__panelCreateBound = true;

  document.addEventListener('click', async (e) => {
    const btn = e.target.closest('button');
    if (!(btn instanceof HTMLElement)) return;

    const action = btn.dataset?.action || btn.id;
    if (action !== 'create') return;

    // –ü—Ä–∞—Ü—é—î–º–æ —Ç—ñ–ª—å–∫–∏ –∫–æ–ª–∏ –∫–ª—ñ–∫ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –±–ª–æ–∫—É "–î—ñ–∞–º–µ—Ç—Ä–∏"
    const block = btn.closest('#univers_diameter');
    if (!block) return;

    // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Å–ª–æ—Ç –∑–∞ —Å–µ–∫—Ç–æ—Ä–æ–º
    const group = btn.closest('.sector-block');
    let slot = 'object2';
    if (group?.querySelector('#createFirstObject')) slot = 'object1';
    if (group?.querySelector('#createSecondObject')) slot = 'object2';

    // –ü—ñ–¥—Ç—è–≥—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ –≤–∏–±—Ä–∞–Ω—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
    const presetCategoryEl = document.getElementById(
      slot === 'object1' ? 'diamCategoryObject1' : 'diamCategoryObject2'
    );
    const presetCategory =
      presetCategoryEl && typeof presetCategoryEl.value === 'string' ? presetCategoryEl.value : '';

    // –í—ñ–¥–∫—Ä–∏—Ç–∏ –º–æ–¥–∞–ª–∫—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
    await openCreateModal({ mode: 'diameter', presetCategory, slot });
  });
}
